/*
 * Copyright 2017 - 2019 Michael Rapp
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package de.mrapp.apriori

import de.mrapp.apriori.Apriori.Configuration
import de.mrapp.util.Condition
import java.io.Serializable

/**
 * An output of the Apriori algorithm.
 *
 * @param    ItemType         The type of the items, which have been processed by the Apriori
 *                            algorithm
 * @property configuration    The configuration of the Apriori algorithm
 * @property startTime        The time, the Apriori algorithm was started
 * @property endTime          The time, the Apriori algorithm terminated
 * @property frequentItemSets The frequent item sets that have been found by the Apriori algorithm
 * @property ruleSet          The rule set that contains the association rules, which have been
 *                            generated by the Apriori algorithm or null, if the algorithm has not
 *                            been configured to generate any rules
 * @author Michael Rapp
 * @since 1.0.0
 */
class Output<ItemType : Item>(val configuration: Configuration,
                              val startTime: Long,
                              val endTime: Long,
                              val frequentItemSets: FrequentItemSets<ItemType>,
                              val ruleSet: RuleSet<ItemType>?) : Serializable {

    /**
     * The runtime of the Apriori algorithm in milliseconds.
     */
    val runtime: Long
        get() = endTime - startTime

    init {
        Condition.ensureAtLeast(startTime, 0, "The start time must be at least 0")
        Condition.ensureAtLeast(endTime, startTime, "The end time must be at least $startTime")
    }

}
