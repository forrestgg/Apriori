apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

buildscript {
    ext.version_kotlin = '1.2.61'
    ext.version_dokka = '0.9.17'
    ext.version_java_util = '[2.0.1,2.1.0)'
    ext.version_slf4j = '[1.7,1.8)'
    ext.version_mockito = '[2.8,2.9)'
    ext.version_logback = '[1.2,1.3)'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$version_dokka"
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$projectDir/doc/javadoc"
}


version VERSION
group GROUP

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"
    api "com.github.michael-rapp:java-util:$version_java_util"
    implementation "org.slf4j:slf4j-api:$version_slf4j"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$version_kotlin"
    testImplementation "org.mockito:mockito-core:$version_mockito"
    testImplementation "ch.qos.logback:logback-classic:$version_logback"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from tasks.javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.groupId = GROUP
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = VERSION

            repository(url: RELEASE_REPOSITORY_URL) {
                authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
            }
            snapshotRepository(url: SNAPSHOT_REPOSITORY_URL) {
                authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
            }

            pom.project {
                name POM_NAME
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url POM_URL

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }
}
